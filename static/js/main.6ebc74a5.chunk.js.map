{"version":3,"sources":["components/Todoinput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todoinput","_this$props","this","props","item","handleChange","handleSubmit","editItem","react_default","a","createElement","onSubmit","className","type","placeholder","value","onChange","required","maxlength","Component","TodoItem","title","handleDelete","handleEdit","handleChecked","checked","onClick","TodoList","items","clearList","map","TodoItem_TodoItem","key","id","App","state","uuid","e","_this","setState","target","preventDefault","newItem","updatedItems","concat","Object","toConsumableArray","filteredItems","filter","selectedItem","find","console","log","Todoinput_Todoinput","length","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ebc74a5.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Todoinput extends Component {\r\n    render() {\r\n        const{item,handleChange,handleSubmit,editItem}=this.props\r\n        return (\r\n          \r\n                <form onSubmit={handleSubmit}>\r\n                    <div className='input-group'>\r\n                        <div className='input-group-prepend'>\r\n                            <div className='input-group-text text-white bg-primary text-white'>\r\n                                <i className='fas fa-book'></i>\r\n                            </div>\r\n                        </div>\r\n                        <input type='text' className='form-control text-capitalize' placeholder='Add todo item' value={item} onChange={handleChange} required maxlength=\"20\"/>\r\n                    </div>\r\n                    <button type='submit' className={editItem ? \"btn btn-block btn-outline-warning mt-3 text-capitalize\" : \"btn btn-block btn-outline-success mt-3 text-capitalize\"}>{editItem ? 'edit item':\"add todo\" }</button>\r\n                </form>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nexport default class TodoItem extends Component {\r\n    render() {\r\n        const{title,handleDelete,handleEdit,handleChecked,checked}=this.props;\r\n        return (\r\n            <li className='list-group-item text-capitalize d-flex justify-content-between my-2'>\r\n                <h6 className={checked?\"line-through\" : \"text\"}>{title} </h6>\r\n                <div className='todo-icon'>\r\n                    {!checked?\r\n                     <button className='rounded mx-2 btn btn-outline-dark btn-sm ' onClick={handleChecked} >\r\n                     <i className='fas fa-check'>\r\n                     </i>\r\n                 </button>:''}\r\n                    <button className='rounded mx-2 btn btn-outline-warning btn-sm'  onClick={handleEdit} >\r\n                        <i className='fas fa-pen'>\r\n                        </i>\r\n                    </button>\r\n                    <button className='btn btn-rounded btn-outline-danger btn-sm' onClick={handleDelete}>\r\n                        <i className='fas fa-trash'>\r\n                        </i>\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TodoItem from './TodoItem';\r\nexport default class TodoList extends Component {\r\n    render() {\r\n        const{items,clearList,handleDelete,handleEdit,handleChecked}=this.props\r\n        return (\r\n           <ul className='list-group my-5'>\r\n                 <h3 className='text-capitalize text-center'>todo List</h3>\r\n                 {\r\n                     items.map(item=>{\r\n                         return(\r\n                            <TodoItem key={item.id} title={item.title} handleDelete={()=> handleDelete(item.id)} handleEdit={()=>handleEdit(item.id)} handleChecked={()=>handleChecked(item.id)} checked={item.checked}/>\r\n                         )\r\n                     })\r\n                 }\r\n               <button type='button' className='btn btn-outline-danger btn-block text-capitalize mt-5'\r\n               onClick={clearList}>Clear List</button>\r\n           </ul>\r\n        );\r\n    }\r\n}\r\n","import React,{Component} from 'react';\nimport TodoInput from './components/Todoinput';\nimport TodoList from './components/TodoList';\nimport uuid from 'uuid';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nclass App extends Component{\n  state={\n    items:[],\n    id:uuid(),\n    item:'',\n    editItem:false,\n    checked:false\n  };\n  handleChange=(e)=>{\n    this.setState({\n      item:e.target.value\n    });\n  };\nhandleSubmit=e=>{\ne.preventDefault();\n\nconst newItem={\n  id:this.state.id,\n  title:this.state.item,\n  checked:this.state.checked\n};\nconst updatedItems=[...this.state.items,newItem];\n\nthis.setState({\n  items:updatedItems,\n  item:'',\n  id:uuid(),\n  editItem:false\n});\n}\nclearList=()=>{\n  this.setState({\n    items:[]\n  })\n};\nhandleDelete=(id)=>{\n  const filteredItems=this.state.items.filter(item=>item.id !== id);\n  this.setState({\n    items:filteredItems\n  });\n}\nhandleEdit=(id)=>{\n\nconst filteredItems=this.state.items.filter(item=>item.id !== id);\nconst selectedItem=this.state.items.find(item=>item.id===id);\nconsole.log(selectedItem);\n  this.setState({\n    items:filteredItems,\n    item:selectedItem.title,\n    editItem:true,\n    id:id\n  });\n}\nhandleChecked=(id)=>{\n  const selectedItem=this.state.items.find(item=>item.id===id);\n  console.log(selectedItem);\n    this.setState({\n    });\n    selectedItem.checked=true;\n  }\n \nrender(){\n  return (\n    <div className='container-fluid'>\n      <div className='row'>\n        <div className='mx-auto col-lg-5 col-md-5 col-sm-12 mt-4'>\n          <h3 className='text-capitalize text-center'>react to do list</h3>\n          <div className='card card-body my-3'>\n        <TodoInput item={this.state.item} handleChange={this.handleChange} handleSubmit={this.handleSubmit} editItem={this.state.editItem} />\n        {this.state.items.length!==0?\n        <TodoList items={this.state.items} clearList={this.clearList} handleDelete={this.handleDelete} handleEdit={this.handleEdit} handleChecked={this.handleChecked}/>\n    :\"\"}\n        </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}